#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cctype>
#include <complex>
#include <ctime>
#include <sstream>
#include <vector>
#include <limits>
#include <iomanip>

using namespace std;

struct Fraction {
    int numerator;
    int denominator;
};

void title() {
    cout << "\n\n\n";
    cout << "      ##********************##\n";
    cout << "      #                      #\n";
    cout << "      *   Mathira Mathibay   *\n";
    cout << "      #                      #\n";
    cout << "      ##********************##\n";
}

void credits() {
    cout << "     By: Mikay, Mav, and Elaine\n\n\n";
}

void menu() {
    cout << "Main Menu\n\n";
}

void polynomialFunction() {
    cout << "1. Polynomial Function\n";
}

void leadingCoefficient() {
    cout << "Leading Coefficient: ";
}

int strictCoefficient(float &num) {
    while (!(cin >> num) || num == 0) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        system("CLS");
        cout << "Your input is invalid. Please enter a number: ";
    }
    return 0;
}

int Coefficient(float &num) {
    while (!(cin >> num)) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        system("CLS");
        cout << "Your input is invalid. Please enter a number: ";
    }
    return 0;
}

int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

Fraction simplify(Fraction frac) {
    int divisor = gcd(frac.numerator, frac.denominator);
    if(divisor != 0) {
        frac.numerator /= divisor;
        frac.denominator /= divisor;
    }
    return frac;
}

Fraction inputFraction() {
    Fraction frac;
    cout << "Enter numerator: ";
    cin >> frac.numerator;
    cout << "Enter denominator: ";
    cin >> frac.denominator;
    return simplify(frac);
}

Fraction inputDecimal() {
    float decimal;
    cout << "Enter a decimal number: ";
    cin >> decimal;
    int denominator = 10000;
    int numerator = static_cast<int>(decimal * denominator);
    Fraction frac = { numerator, denominator };
    return simplify(frac);
}

void displayFraction(const Fraction &frac) {
    Fraction f = frac;
    if (f.denominator < 0) {
        f.numerator = -f.numerator;
        f.denominator = -f.denominator;
    }
    if (f.denominator == 1) {
        cout << f.numerator;
    } else {
        cout << f.numerator << "/" << f.denominator;
    }
}

Fraction floatToFraction(double num) {
    int denominator = 1000000; // Increased precision
    int numerator = static_cast<int>(num * denominator);
    Fraction frac = { numerator, denominator };
    return simplify(frac);
}

Fraction addFractions(Fraction a, Fraction b) {
    Fraction result;
    result.numerator = a.numerator * b.denominator + b.numerator * a.denominator;
    result.denominator = a.denominator * b.denominator;
    return simplify(result);
}

Fraction multiplyFraction(Fraction frac, int num) {
    frac.numerator *= num;
    return simplify(frac);
}

int compareFloats(double a, double b, int significantFigures) {
    double tolerance = pow(10, -significantFigures);
    return fabs(a - b) < tolerance;
}

int isValidNumber(const string &str) {
    for (char ch : str) {
        if (!isdigit(ch) && ch != '.' && ch != '/' && ch != '-') {
            return 0;
        }
    }
    return 1;
}

double roundToSignificantFigures(double num, int significantFigures) {
    if (num == 0) {
        return 0;
    }
    double d = ceil(log10(fabs(num)));
    int power = significantFigures - static_cast<int>(d);
    double magnitude = pow(10, power);
    long shifted = lround(num * magnitude);
    return shifted / magnitude;
}

void formatNumber(double num, int significantFigures, string &buffer) {
    ostringstream oss;
    oss << fixed << setprecision(significantFigures) << num;
    buffer = oss.str();
}

void solvePolynomial(const vector<double>& coefficients, int degree, int significantFigures) {
    const double PI = 4 * atan(1);
    // Use vectors instead of variable-length arrays.
    vector<complex<double>> roots(degree), new_roots(degree);
    complex<double> epsilon(1e-12, 1e-12);

    for (int i = 0; i < degree; i++) {
        roots[i] = exp(complex<double>(0, 2 * PI * i / degree));
    }

    int iterations = 0;
    int max_iterations = 10000;
    while (iterations < max_iterations) {
        bool converged = true;
        for (int i = 0; i < degree; i++) {
            complex<double> numerator = coefficients[degree];
            complex<double> denominator = 1.0;
            for (int j = 0; j < degree; j++) {
                if (i != j) {
                    denominator *= (roots[i] - roots[j]);
                }
            }
            for (int j = degree - 1; j >= 0; j--) {
                numerator = numerator * roots[i] + coefficients[j];
            }
            new_roots[i] = roots[i] - numerator / denominator;
            if (abs(new_roots[i] - roots[i]) > abs(epsilon)) {
                converged = false;
            }
        }
        for (int i = 0; i < degree; i++) {
            roots[i] = new_roots[i];
        }
        if (converged) {
            break;
        }
        iterations++;
    }

    // Merge roots with similar values.
    vector<int> multiplicities(degree, 1);
    int rcount = degree;
    for (int i = 0; i < rcount; i++) {
        for (int j = i + 1; j < rcount; j++) {
            if (abs(roots[i] - roots[j]) < abs(epsilon)) {
                multiplicities[i]++;
                for (int k = j; k < rcount - 1; k++) {
                    roots[k] = roots[k + 1];
                    multiplicities[k] = multiplicities[k + 1];
                }
                rcount--;
                j--;
            }
        }
    }

    if (rcount == 1) {
        cout << "The solution is:\n";
    } else {
        cout << "The solutions are:\n";
    }
    for (int i = 0; i < rcount; i++) {
        double realPart = roots[i].real();
        double imagPart = roots[i].imag();
        if (isinf(realPart) || isinf(imagPart)) {
            cout << "The solution is undefined or infinite.\n";
            continue;
        }
        double roundedRealPart = roundToSignificantFigures(realPart, significantFigures);
        double roundedImagPart = roundToSignificantFigures(imagPart, significantFigures);

        string realBuffer, imagBuffer;
        formatNumber(roundedRealPart, significantFigures, realBuffer);
        formatNumber(roundedImagPart, significantFigures, imagBuffer);

        if (compareFloats(realPart, roundedRealPart, significantFigures) &&
            compareFloats(imagPart, roundedImagPart, significantFigures)) {
            if (imagPart == 0) {
                if (realPart == static_cast<int>(realPart)) {
                    cout << "x = " << fixed << setprecision(0) << realPart << "\n";
                } else {
                    Fraction frac = { static_cast<int>(realPart * 1000000), 1000000 };
                    frac = simplify(frac);
                    cout << "x = ";
                    displayFraction(frac);
                    cout << "\n";
                }
            } else {
                if (imagPart > 0) {
                    cout << "x = " << realBuffer << " + " << imagBuffer << "i\n";
                } else {
                    // Skip the negative sign in imagBuffer since we already output '-'
                    cout << "x = " << realBuffer << " - " << (imagBuffer[0] == '-' ? imagBuffer.substr(1) : imagBuffer) << "i\n";
                }
            }
        } else {
            if (imagPart == 0) {
                if (realPart == static_cast<int>(realPart)) {
                    cout << "x is approximately equal to " << fixed << setprecision(0) << realPart << "\n";
                } else {
                    Fraction frac = { static_cast<int>(realPart * 1000000), 1000000 };
                    frac = simplify(frac);
                    cout << "x is approximately equal to ";
                    displayFraction(frac);
                    cout << "\n";
                }
            } else {
                if (imagPart > 0) {
                    cout << "x is approximately equal to " << realBuffer << " + " << imagBuffer << "i\n";
                } else {
                    cout << "x is approximately equal to " << realBuffer << " - " << (imagBuffer[0] == '-' ? imagBuffer.substr(1) : imagBuffer) << "i\n";
                }
            }
        }

        if (multiplicities[i] > 1) {
            cout << " (of multiplicity " << multiplicities[i] << ")";
        }
        cout << "\n";
    }
}

void displayDerivativesAndAntiderivative(vector<double> coefficients, int degree) {
    // We make a copy of the coefficients so that in-place modifications do not affect the rest of the program.
    vector<double> coeff = coefficients;

    // First derivative f'(x)
    cout << "First derivative: f'(x) = ";
    bool firstDerivativeZero = true;
    for (int i = degree; i > 1; i--) {
        if (coeff[i] != 0) {
            firstDerivativeZero = false;
            if (i != degree) {
                if (coeff[i] > 0) {
                    cout << " + ";
                } else {
                    cout << " - ";
                    coeff[i] = -coeff[i];  // Make it positive for printing
                }
            }
            Fraction frac = floatToFraction(coeff[i] * i);
            if (frac.denominator != 1) {
                cout << "(";
                displayFraction(frac);
                cout << ")";
            } else if (frac.numerator != 1) {
                displayFraction(frac);
            }
            if (i > 2) {
                cout << "x^" << (i - 1);
            } else if (i == 2){
                cout << "x";
            }
        }
    }
    if (coeff[1] != 0) {
        if (coeff[1] > 0) {
            cout << " + ";
        } else {
            cout << " - ";
            coeff[1] = -coeff[1];  // Make it positive for printing
        }
        Fraction frac = floatToFraction(coeff[1]);
        displayFraction(frac);
    }
    if (firstDerivativeZero && coeff[1] == 0) {
        cout << "0";
    }
    cout << "\n";

    // Second derivative f''(x)
    cout << "Second derivative: f''(x) = ";
    bool secondDerivativeZero = true;
    for (int i = degree; i > 1; i--) {
        if (coeff[i] != 0) {
            secondDerivativeZero = false;
            if (i != degree) {
                if (coeff[i] > 0) {
                    cout << " + ";
                } else {
                    cout << " - ";
                    coeff[i] = -coeff[i];
                }
            }
            Fraction frac = floatToFraction(coeff[i] * i * (i - 1));
            if (frac.denominator != 1 && i > 2) {
                cout << "(";
                displayFraction(frac);
                cout << ")";
            } else if (frac.numerator != 1) {
                displayFraction(frac);
            }
            if (i > 3) {
                cout << "x^" << (i - 2);
            } else if (i == 3){
                cout << "x";
            }
        }
    }
    if (secondDerivativeZero) {
        cout << "0";
    }
    cout << "\n";

    // Antiderivative F(x) = integral of f(x)
    cout << "Antiderivative: F(x) = ";
    bool antiderivativeZero = true;
    for (int i = degree; i >= 0; i--) {
        if (coeff[i] != 0) {
            antiderivativeZero = false;
            if (i != degree) {
                if (coeff[i] > 0) {
                    cout << " + ";
                } else {
                    cout << " - ";
                    coeff[i] = -coeff[i];
                }
            }
            Fraction frac = floatToFraction(coeff[i] / (i + 1.0));
            if (frac.denominator != 1) {
                cout << "(";
                displayFraction(frac);
                cout << ")";
            } else if (frac.numerator != 1) {
                displayFraction(frac);
            }
            if (i > 0) {
                cout << "x^" << (i + 1);
            }
            else {
                cout << "x";
            }
        }
    }
    if (antiderivativeZero) {
        cout << "0";
    }
    cout << " + C\n";
}

double fractionToFloat(const string &fracStr) {
    int numerator, denominator;
    char slash;
    sscanf(fracStr.c_str(), "%d/%d", &numerator, &denominator);
    return static_cast<double>(numerator) / denominator;
}

void handlePolynomial(int degree, int significantFigures) {
    // Use a vector to store coefficients (as Fractions) for the polynomial.
    vector<Fraction> coefficients(degree + 1);
    for (int i = degree; i >= 0; i--) {
        string input;
        do {
            cout << "Coefficient of x^" << i << " (You can enter input as a fraction or decimal): ";
            cin >> input;
            if (!isValidNumber(input) || (i == degree && atof(input.c_str()) == 0))
                cout << "Invalid input. Please enter a valid number and ensure the leading term is not 0.\n";
        } while (!isValidNumber(input) || (i == degree && atof(input.c_str()) == 0));

        if (input.find('/') != string::npos) {
            int num, den;
            sscanf(input.c_str(), "%d/%d", &num, &den);
            coefficients[i] = simplify({ num, den });
        } else {
            float decimal = stof(input);
            int denominator = 1000000; // Increased precision
            int numerator = static_cast<int>(decimal * denominator);
            Fraction frac = { numerator, denominator };
            coefficients[i] = simplify(frac);
        }
    }

    cout << "\nThe polynomial is: f(x) = ";
    for (int i = degree; i >= 0; i--) {
        if (coefficients[i].numerator != 0) {
            if (i != degree) {
                if (coefficients[i].numerator > 0) {
                    cout << " + ";
                } else {
                    cout << " - ";
                    coefficients[i].numerator = -coefficients[i].numerator;
                }
            }
            if (coefficients[i].numerator != 1 || i == 0) {
                if (coefficients[i].denominator == 1) {
                    cout << coefficients[i].numerator;
                } else {
                    if(i == 0) {
                        displayFraction(coefficients[i]);
                    } else {
                        cout << "(";
                        displayFraction(coefficients[i]);
                        cout << ")";
                    }
                }
            }
            if (i > 0) {
                cout << "x";
                if (i > 1) {
                    cout << "^" << i;
                }
            }
        }
    }
    cout << ".\n";

    cout << "The highest degree of the polynomial is " << degree << ".\n";
    cout << "The number of turning points for the polynomial is at most " << degree - 1 << ".\n";
    cout << "In finding the y-intercept, we simply substitute 0 for x.\n";
    cout << "y = ";
    displayFraction(coefficients[0]);
    cout << "\n\n";

    if (degree % 2 == 0) {
        if (coefficients[degree].numerator > 0) {
            cout << "Even Degree and Positive Leading Coefficient\n";
            cout << "- The end behavior of the graph rises to the left and the right.\n\n";
        } else {
            cout << "Even Degree and Negative Leading Coefficient\n";
            cout << "- The end behavior of the graph falls to the left and the right.\n\n";
        }
    } else {
        if (coefficients[degree].numerator > 0) {
            cout << "Odd Degree and Positive Leading Coefficient\n";
            cout << "- The end behavior of the graph falls to the left and rises to the right.\n\n";
        } else {
            cout << "Odd Degree and Negative Leading Coefficient\n";
            cout << "- The end behavior of the graph rises to the left and falls to the right.\n\n";
        }
    }

    // Convert the Fraction coefficients to floating-point for further processing.
    vector<double> coeffs(degree + 1);
    for (int i = 0; i <= degree; i++) {
        coeffs[i] = static_cast<double>(coefficients[i].numerator) / coefficients[i].denominator;
    }
    solvePolynomial(coeffs, degree, significantFigures);
    displayDerivativesAndAntiderivative(coeffs, degree);
}

void playFindTheRoots(int degree) {
    srand(static_cast<unsigned int>(time(nullptr))); // Seed the random number generator.

    // Generate random roots (either integers or fractions).
    vector<double> roots(degree);
    vector<int> multiplicities(degree, 1);
    for (int i = 0; i < degree; i++) {
        int isFraction = rand() % 2;
        if (isFraction) {
            int numerator = rand() % 10 + 1;
            int denominator = rand() % 10 + 1;
            roots[i] = static_cast<double>(numerator) / denominator;
        } else {
            roots[i] = rand() % 10 + 1;
        }
        multiplicities[i] = 1;
    }

    // Construct the polynomial from the generated roots.
    vector<double> coefficients(degree + 1, 0.0);
    coefficients[0] = 1;
    for (int i = 1; i <= degree; i++) {
        coefficients[i] = 0;
    }

    for (int i = 0; i < degree; i++) {
        for (int j = degree; j > 0; j--) {
            coefficients[j] = coefficients[j] * (-roots[i]) + coefficients[j - 1];
        }
        coefficients[0] *= -roots[i];
    }

    cout << "\nThe polynomial is: f(x) = ";
    for (int i = degree; i >= 0; i--) {
        if (coefficients[i] != 0) {
            if (i != degree) {
                if (coefficients[i] > 0) {
                    cout << " + ";
                } else {
                    cout << " - ";
                    coefficients[i] = -coefficients[i];
                }
            }
            if (coefficients[i] != 1 || i == 0) {
                if (coefficients[i] == static_cast<int>(coefficients[i])) {
                    cout << static_cast<int>(coefficients[i]);
                } else if (i != 0) {
                    Fraction frac = { static_cast<int>(coefficients[i] * 10000), 10000 };
                    frac = simplify(frac);
                    cout << "(";
                    displayFraction(frac);
                    cout << ")";
                } else {
                    Fraction frac = { static_cast<int>(coefficients[i] * 10000), 10000 };
                    frac = simplify(frac);
                    displayFraction(frac);
                }
            }
            if (i > 0) {
                cout << "x";
                if (i > 1) {
                    cout << "^" << i;
                }
            }
        }
    }
    cout << ".\n";
    if (degree > 1) {
        cout << "Please take note that some of the roots are rounded off or simplified.\n";
    }
    cout << "A deduction of 5 points will be incurred for every wrong attempt.\n";

    int attempts = 2 * degree;
    int score = 10 * degree;
    int correctRoots = 0;
    vector<int> usedRoots(degree, 0);
    cout << "You have " << attempts << " attempts to find the roots.\n";

    for (int attempt = 0; attempt < attempts; attempt++) {
        cout << "Please enter a root as a fraction or decimal: ";
        string userRoot;
        cin >> userRoot;

        double userRootDecimal = 0.0;
        if (userRoot.find('/') != string::npos) {
            userRootDecimal = fractionToFloat(userRoot);
        } else {
            userRootDecimal = atof(userRoot.c_str());
        }

        bool found = false;
        for (int j = 0; j < degree; j++) {
            if (compareFloats(roots[j], userRootDecimal, 6) && usedRoots[j] < multiplicities[j]) {
                found = true;
                usedRoots[j]++;
                correctRoots++;
                break;
            }
        }

        if (found) {
            cout << "You're correct!\n";
            if (correctRoots == degree) {
                break;
            }
        } else {
            cout << "Uh Oh. It is incorrect. Please try again.\n";
            score -= 5;
        }

        if (attempts - attempt > 2) {
            cout << "You have " << attempts - attempt - 1 << " attempts left.\n";
        } else if (attempts - attempt == 2) {
            cout << "Oh no! You only have one more attempt.\n";
        }
    }

    if (correctRoots < degree) {
        if (degree == 1) {
            cout << "The correct root is:\n";
        } else {
            cout << "The correct roots are:\n";
        }
        for (int i = 0; i < degree; i++) {
            if (roots[i] == static_cast<int>(roots[i])) {
                cout << "x = " << static_cast<int>(roots[i]) << "\n";
            } else {
                Fraction frac = { static_cast<int>(roots[i] * 10000), 10000 };
                frac = simplify(frac);
                displayFraction(frac);
                cout << "\n";
            }
        }
    }
    system("CLS");
    if (score == 10 * degree) {
        cout << "Wow! What a fantastic score! Your final score is " << score << "/" << (10 * degree) << ".\n";
    } else if (score < 10 * degree && score >= (10 * degree) / 2) {
        cout << "Wow! You're getting better! Your final score is " << score << "/" << (10 * degree) << ".\n";
    } else {
        cout << "It's okay. Practice makes perfect! Your final score is " << score << "/" << (10 * degree) << ".\n";
    }
}

int getPositiveInteger(const string &prompt) {
    int value;
    string input;
    while (true) {
        cout << prompt;
        cin >> input;
        stringstream ss(input);
        if (ss >> value && value > 0)
            break;
        else
            cout << "Invalid input. Please enter a positive integer.\n";
    }
    return value;
}

int main() {
    title();
    credits();
    system("pause");
    system("CLS");
    int option;
    cout << "A pleasant day, math learners. Let's delve into polynomial functions.\n\n\n";
    system("pause");
start:
    system("CLS");
    cout << "Kindly choose between the options.\n";
    cout << "Enter any whole numbers from only 1-3.\n\n";
    menu();
    polynomialFunction();
    cout << "2. Play Find the Roots!\n";
    cout << "3. Want to donate?\n";
    cout << "4. Exit\n\n\n";
    cout << "Note: Pressing the wrong key will shutdown your computer. I'm serious. haha. =)\n";
    cin >> option;
    switch (option) {
        case 1: {
            system("CLS");
            int degree = getPositiveInteger("Enter the degree of the polynomial (Your input must be a positive integer): ");
            int significantFigures = getPositiveInteger("Enter the number of significant figures (Your input must be a positive integer): ");
            handlePolynomial(degree, significantFigures);
            system("pause");
            goto start;
            break;
        }
        case 2: {
            system("CLS");
            int degree = getPositiveInteger("Enter the degree of the polynomial (positive integer): ");
            playFindTheRoots(degree);
            system("pause");
            goto start;
            break;
        }
        case 3: {
            system("CLS");
            cout << "Mathira Mathibay is a relatively new application.\n";
            cout << "While the dream of the developers include\n";
            cout << "making math as fun and detailed as possible,\n";
            cout << "we have a limited budget to develop the app to its full potential.\n";
            cout << "Indeed, it is our goal to help the youth\n";
            cout << "and mathematics education live up to their expectation.\n";
            cout << "We would like to ask a small favor from you.\n";
            cout << "Please donate a portion of your fund through Gcash to help us to realize this goal.\n\n";
            cout << "Maverick Jann H. Fernandez: 0945-866-0672.\n\n";
            system("pause");
            goto start;
            break;
        }
        case 4: {
            system("CLS");
            cout << "Thank you for visiting our program. =)\n";
            system("pause");
            return 0;
        }
        default: {
            system("CLS");
            cout << "It was a joke. Haha. May you have a great vacation!";
            system("pause");
            goto start;
            break;
        }
    }
    return 0;
}
