#include <iostream>
#include <vector>
#include <complex>
#include <cmath>
#include <string>
#include <sstream>
#include <iomanip>
#include <limits>
#include <cstdlib>
#include <ctime>
#include <cstdio>

using namespace std;

void handlePolynomial(int deg);
void playFindTheRoots(int deg);

struct Fraction {
    int numerator, denominator;
};

int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}

Fraction simplify(const Fraction &f) {
    if (f.denominator == 0) return {0,1};
    int n = f.numerator, d = f.denominator;
    int g = gcd(abs(n), abs(d));
    n /= g; d /= g;
    if (d < 0) { n = -n; d = -d; }
    return {n,d};
}

Fraction floatToFraction(double x) {
    if (x == 0.0) return {0,1};
    const int PREC = 1000000;
    int sign = x < 0 ? -1 : 1;
    x = fabs(x);
    int num = int(x * PREC + 0.5) * sign;
    return simplify({num,PREC});
}

void displayFraction(const Fraction &f0) {
    Fraction f = simplify(f0);
    if (f.denominator == 1)
        cout << f.numerator;
    else
        cout << f.numerator << "/" << f.denominator;
}

bool isNumericInputValid(const string &s) {
    if (s.empty()) return false;
    for (char c : s)
        if (!isdigit(c) && c!='.' && c!='/' && c!='-')
            return false;
    return true;
}

int getPositiveInteger(const string &prompt) {
    string line;
    while (true) {
        cout << prompt;
        if (!getline(cin, line)) exit(0);
        if (line.empty()) continue;
        if (!isNumericInputValid(line)) {
            cout << "Invalid input. Please enter a positive integer.\n";
            continue;
        }
        stringstream ss(line);
        int v; char junk;
        if ((ss >> v) && !(ss >> junk) && v > 0)
            return v;
        cout << "Invalid input. Please enter a positive integer.\n";
    }
}

double fractionToFloat(const string &s) {
    if (!isNumericInputValid(s)) return NAN;
    int n=0, d=1;
    sscanf(s.c_str(), "%d/%d", &n, &d);
    return d == 0 ? NAN : double(n)/d;
}

vector<int> divisors(int x) {
    x = abs(x);
    vector<int> D;
    for (int i = 1; i <= x; ++i)
        if (x % i == 0) D.push_back(i);
    return D;
}

Fraction evalPoly(const vector<Fraction> &C, const Fraction &r) {
    int n = int(C.size()) - 1;
    Fraction acc = C[n];
    for (int i = n-1; i >= 0; --i) {
        acc = simplify({acc.numerator * r.numerator,
                        acc.denominator * r.denominator});
        acc = simplify({
            acc.numerator * C[i].denominator + C[i].numerator * acc.denominator,
            acc.denominator * C[i].denominator
        });
    }
    return acc;
}

void syntheticDivide(vector<Fraction> &C, const Fraction &r) {
    int n = int(C.size()) - 1;
    vector<Fraction> Q(n);
    Q[n-1] = C[n];
    for (int i = n-2; i >= 0; --i) {
        Fraction t = simplify({Q[i+1].numerator * r.numerator,
                               Q[i+1].denominator * r.denominator});
        t = simplify({
            t.numerator * C[i+1].denominator + C[i+1].numerator * t.denominator,
            t.denominator * C[i+1].denominator
        });
        Q[i] = t;
    }
    C = Q;
}

vector<Fraction> extractRationalRoots(vector<Fraction> &C) {
    vector<Fraction> roots;
    int n = int(C.size()) - 1;
    if (n < 1) return roots;
    int A = C[n].numerator, B = C[0].numerator;
    auto Ps = divisors(B), Qs = divisors(A);
    bool found;
    do {
        found = false;
        for (int p : Ps) {
            for (int q : Qs) {
                for (int sign : {+1, -1}) {
                    Fraction cand = simplify({sign*p, q});
                    if (evalPoly(C, cand).numerator == 0) {
                        roots.push_back(cand);
                        syntheticDivide(C, cand);
                        found = true;
                        break;
                    }
                }
                if (found) break;
            }
            if (found) break;
        }
    } while (found && C.size() > 1);
    return roots;
}

static const int DEFAULT_DECIMALS = 6;

void solvePolynomial(const vector<double> &coef, int degree) {
    if (degree == 1) {
        double a1 = coef[1], a0 = coef[0];
        double x = -a0 / a1;
        Fraction f = floatToFraction(x);
        cout << "The solution is:\n  x = ";
        displayFraction(f);
        cout << "\n";
        return;
    }
    if (degree == 2) {
        double a = coef[2], b = coef[1], c = coef[0];
        complex<double> disc(b*b - 4*a*c, 0.0), sq = sqrt(disc);
        complex<double> r1 = (-b + sq)/(2*a), r2 = (-b - sq)/(2*a);

        auto printRoot = [&](const complex<double> &z){
            cout << "  x = ";
            double re = z.real(), im = z.imag();
            Fraction fr = floatToFraction(re);
            double rv = double(fr.numerator)/fr.denominator;
            if (fabs(re - rv) < 1e-12) displayFraction(fr);
            else cout << fixed << setprecision(DEFAULT_DECIMALS) << re;

            if (fabs(im) > 1e-12) {
                cout << (im>0?" + ":" - ");
                Fraction fi = floatToFraction(fabs(im));
                double iv = double(fi.numerator)/fi.denominator;
                if (fabs(fabs(im)-iv) < 1e-12) displayFraction(fi);
                else cout << fixed << setprecision(DEFAULT_DECIMALS) << fabs(im);
                cout << "i";
            }
            cout << "\n";
        };

        cout << "The solutions are:\n";
        printRoot(r1);
        printRoot(r2);
        return;
    }
    const double PI = acos(-1.0);
    vector<complex<double>> roots(degree), next(degree);
    complex<double> eps(1e-12,1e-12);

    for (int i = 0; i < degree; ++i)
        roots[i] = exp(complex<double>(0,2*PI*i/degree));

    for (int it = 0; it < 10000; ++it) {
        bool conv = true;
        for (int i = 0; i < degree; ++i) {
            complex<double> num = coef[degree], den = 1.0;
            for (int j = 0; j < degree; ++j)
                if (i!=j) den *= (roots[i]-roots[j]);
            for (int k = degree-1; k >= 0; --k)
                num = num*roots[i] + coef[k];
            next[i] = roots[i] - num/den;
            if (abs(next[i]-roots[i]) > abs(eps)) conv = false;
        }
        roots = next;
        if (conv) break;
    }

    vector<int> mult(degree,1);
    int cnt = degree;
    for (int i = 0; i < cnt; ++i) {
        for (int j = i+1; j < cnt; ++j) {
            if (abs(roots[i]-roots[j]) < abs(eps)) {
                mult[i]++;
                for (int k = j; k < cnt-1; ++k) {
                    roots[k] = roots[k+1];
                    mult[k]  = mult[k+1];
                }
                --cnt; --j;
            }
        }
    }

    cout << (cnt==1 ? "The solution is:\n" : "The solutions are:\n");
    for (int i = 0; i < cnt; ++i) {
        cout << "  x = ";
        double re = roots[i].real(), im = roots[i].imag();
        Fraction fr = floatToFraction(re);
        double rv = double(fr.numerator)/fr.denominator;
        if (fabs(re-rv)<1e-12) displayFraction(fr);
        else cout << fixed << setprecision(DEFAULT_DECIMALS) << re;

        if (fabs(im)>1e-12) {
            cout << (im>0?" + ":" - ");
            Fraction fi = floatToFraction(fabs(im));
            double iv = double(fi.numerator)/fi.denominator;
            if (fabs(fabs(im)-iv)<1e-12) displayFraction(fi);
            else cout << fixed << setprecision(DEFAULT_DECIMALS) << fabs(im);
            cout << "i";
        }
        cout << "\n";
        if (mult[i]>1)
            cout << "    (multiplicity " << mult[i] << ")\n";
    }
}

void displayDerivativesAndAntiderivative(
    const vector<double>   &origD,
    const vector<Fraction> &origC,
    int deg)
{
    auto printD = [&](double coef, int pow, bool &first) {
        if (fabs(coef) < 1e-14) return;
        double mag = fabs(coef);
        bool omitMag = (fabs(mag-1.0)<1e-14 && pow>0);
        if (!first)       cout << (coef<0 ? " - " : " + ");
        else if (coef<0)  cout << "-";
        first = false;
        if (!omitMag) cout << int(mag);
        if (pow>0) {
            cout << "x";
            if (pow>1) cout << "^" << pow;
        }
    };

    cout << "First derivative: f'(x) = ";
    bool first = true;
    for (int i = deg; i >= 1; --i)
        printD(origD[i]*i, i-1, first);
    if (first) cout << "0";
    cout << "\n";

    cout << "Second derivative: f''(x) = ";
    first = true;
    for (int i = deg; i >= 2; --i)
        printD(origD[i]*i*(i-1), i-2, first);
    if (first) cout << "0";
    cout << "\n";

    cout << "Antiderivative: F(x) = ";
    first = true;
    for (int i = deg; i >= 0; --i) {
        Fraction F = simplify({
            origC[i].numerator,
            origC[i].denominator * (i+1)
        });
        if (F.numerator == 0) continue;

        if (!first)       cout << (F.numerator<0 ? " - " : " + ");
        else if (F.numerator<0) cout << "-";
        first = false;

        Fraction G = simplify({abs(F.numerator), F.denominator});
        bool omitMag = (G.numerator==1 && G.denominator==1 && i+1>0);
        if (!omitMag) {
            if (G.denominator != 1) cout << "(";
            displayFraction(G);
            if (G.denominator != 1) cout << ")";
        }

        cout << "x";
        if (i+1>1) cout << "^" << (i+1);
    }
    if (first) cout << "0";
    cout << " + C\n";
}

void handlePolynomial(int deg) {
    vector<Fraction> C(deg+1);
    for (int i = deg; i >= 0; --i) {
        string in;
        while (true) {
            cout << "Coefficient of x^" << i
                 << " (fraction or decimal): ";
            cin >> in;
            if (!isNumericInputValid(in) ||
               (i==deg && fractionToFloat(in)==0.0))
            {
                cout << " Invalid input (leading coeff. should be nonzero).\n";
                continue;
            }
            break;
        }
        if (in.find('/') != string::npos) {
            int n,d; sscanf(in.c_str(), "%d/%d", &n,&d);
            C[i] = simplify({n,d});
        } else {
            double x = stod(in);
            C[i] = floatToFraction(x);
        }
    }
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<Fraction> origC = C;
    vector<double> origD(deg+1);
    for (int i = 0; i <= deg; ++i)
        origD[i] = double(C[i].numerator) / C[i].denominator;

    cout << "\nThe polynomial is: f(x) = ";
    bool first = true;
    for (int i = deg; i >= 0; --i) {
        int n = C[i].numerator, d = C[i].denominator;
        if (n == 0) continue;
        double v = double(n)/d;
        bool omitMag = (abs(n)==1 && d==1 && i>0);
        if (!first)      cout << (v<0 ? " - " : " + ");
        else if (v<0)    cout << "-";
        first = false;
        if (!omitMag) {
            if (d==1) cout << abs(n);
            else {
                cout << "(";
                displayFraction({abs(n),d});
                cout << ")";
            }
        }
        if (i>0) {
            cout << "x";
            if (i>1) cout << "^" << i;
        }
    }
    if (first) cout << "0";
    cout << ".\n";

    cout << "Degree = " << deg
         << ", max turning points = " << deg-1 << "\n";
    cout << "y-intercept = ";
    displayFraction(C[0]);
    cout << "\n\n";

    auto ratRoots = extractRationalRoots(C);
    if (!ratRoots.empty()) {
        cout << "Exact rational root(s):\n";
        for (auto &r : ratRoots) {
            cout << "  x = ";
            displayFraction(r);
            cout << "\n";
        }
        cout << "\n";
    }

    int remDeg = int(C.size()) - 1;
    if (remDeg > 0) {
        vector<double> Cd(remDeg+1);
        for (int i = 0; i <= remDeg; ++i)
            Cd[i] = double(C[i].numerator)/C[i].denominator;
        solvePolynomial(Cd, remDeg);
        cout << "\n";
    }

    displayDerivativesAndAntiderivative(origD, origC, deg);
}

void playFindTheRoots(int deg) {
    srand((unsigned)time(nullptr));
    vector<double> roots(deg);
    for (int i = 0; i < deg; ++i) {
        if (rand()%2) {
            int n=rand()%9+1, d=rand()%9+1;
            roots[i] = double(n)/d;
        } else {
            roots[i] = rand()%9+1;
        }
    }
    vector<double> C(deg+1,0.0);
    C[0]=1.0;
    for (double r: roots) {
        for (int j=deg; j>0; --j)
            C[j] = C[j-1] - r*C[j];
        C[0] *= -r;
    }

    cout << "\nPolynomial f(x) = ";
    bool first = true;
    for (int i = deg; i >= 0; --i) {
        if (C[i]==0) continue;
        double v = C[i], mag=fabs(v);
        bool omitMag = (fabs(mag-1.0)<1e-12 && i>0);
        if (!first)      cout << (v<0?" - ":" + ");
        else if (v<0)    cout << "-";
        first = false;
        if (!omitMag) {
            Fraction f = floatToFraction(mag);
            simplify(f);
            displayFraction(f);
        }
        if (i>0) {
            cout << "x";
            if (i>1) cout << "^" << i;
        }
    }
    if (first) cout << "0";
    cout << ".\n\nYou have " << 2*deg
         << " attempts to guess " << deg << " root(s).\n";

    int attempts = 2*deg, score = 10*deg, found = 0;
    vector<bool> used(deg,false);
    string in;
    for (int a=0; a<attempts && found<deg; ++a) {
        cout << "Enter a root (fraction or decimal): ";
        cin >> in;
        if (!isNumericInputValid(in)) {
            cout << "Invalid input. Try again.\n\n";
            continue;
        }
        double guess = (in.find('/')!=string::npos)
                       ? fractionToFloat(in)
                       : stod(in);
        bool ok = false;
        for (int i=0; i<deg; ++i) {
            if (!used[i] && fabs(roots[i]-guess)<1e-6) {
                used[i] = true;
                found++;
                ok = true;
                break;
            }
        }
        cout << (ok ? "Correct!\n" : "Wrong.\n");
        if (!ok) score -= 5;
        cout << (attempts - a - 1 > 0
                 ? to_string(attempts - a - 1) + " attempt(s) left.\n\n"
                 : "");
    }
    if (found < deg) {
        cout << "Solution(s):\n";
        for (double r : roots) {
            if (floor(r)==r) cout << int(r) << "\n";
            else             displayFraction(floatToFraction(r)), cout<<"\n";
        }
    }
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    system("CLS");
    cout << "Your score: " << score << "/" << 10*deg << "\n";
}

void title() {
    cout << "\n\n##********************##\n"
         << "  Mathira Mathibay\n"
         << "##********************##\n\n";
}
void credits() {
    cout << "By: Mikay, Mav, and Elaine\n\n";
}
void menu() {
    cout << "Main Menu:\n"
         << "1. Polynomial Function\n"
         << "2. Play Find the Roots\n"
         << "3. Donate\n"
         << "4. Exit\n\n";
}

int main() {
    title(); credits();
    system("pause"); system("CLS");
    while (true) {
        menu();
        int opt = getPositiveInteger("Choose 1-4: ");
        system("CLS");
        switch (opt) {
            case 1: {
                int d = getPositiveInteger("Degree: ");
                system("CLS");
                handlePolynomial(d);
                system("pause"); system("CLS");
                break;
            }
            case 2: {
                int d = getPositiveInteger("Degree: ");
                system("CLS");
                playFindTheRoots(d);
                system("pause"); system("CLS");
                break;
            }
            case 3: {
                cout << "Support us via GCash: XXXX-XXX-XXXX\n";
                system("pause"); system("CLS");
                break;
            }
            case 4:
                cout << "Thank you!\n";
                return 0;
            default:
                cout << "Invalid option. Try 1-4.\n";
                system("pause"); system("CLS");
        }
    }
    return 0;
}
